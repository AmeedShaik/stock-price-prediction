{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNKiZKIs2rUc6qxppXKpIrK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"wRZO-DShye3g"},"outputs":[],"source":["import streamlit as st\n","import yfinance as yf\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler\n","from tensorflow.keras.models import load_model\n","import matplotlib.pyplot as plt\n","\n","# Title of the app\n","st.title(\"Stock Price Prediction App\")\n","\n","# Sidebar for user input\n","st.sidebar.header(\"Stock Prediction Settings\")\n","\n","# Select stock ticker\n","stock_ticker = st.sidebar.text_input(\"Enter Stock Ticker (e.g., AAPL, TSLA, INFY.BO)\", value=\"AAPL\")\n","\n","# Select date range\n","start_date = st.sidebar.date_input(\"Start Date\", value=pd.to_datetime(\"2015-01-01\"))\n","end_date = st.sidebar.date_input(\"End Date\", value=pd.to_datetime(\"2023-01-01\"))\n","\n","# Load the model\n","@st.cache(allow_output_mutation=True)\n","def load_lstm_model():\n","    return load_model(\"stock_prediction_lstm.h5\")  # Make sure your trained model is in the same directory.\n","\n","model = load_lstm_model()\n","\n","# Fetch stock data\n","if st.sidebar.button(\"Fetch Data\"):\n","    try:\n","        # Download stock data\n","        data = yf.download(stock_ticker, start=start_date, end=end_date)\n","        st.subheader(f\"Historical Data for {stock_ticker}\")\n","        st.write(data.tail())\n","\n","        # Plot historical prices\n","        st.subheader(\"Closing Price Trend\")\n","        plt.figure(figsize=(10, 4))\n","        plt.plot(data['Close'], label=\"Closing Price\")\n","        plt.title(f\"{stock_ticker} Closing Price\")\n","        plt.xlabel(\"Date\")\n","        plt.ylabel(\"Price\")\n","        plt.legend()\n","        st.pyplot(plt)\n","    except Exception as e:\n","        st.error(f\"Error fetching data: {e}\")\n","\n","# Preprocess data and predict future stock prices\n","if st.sidebar.button(\"Predict Stock Prices\"):\n","    try:\n","        # Preprocess data\n","        scaler = MinMaxScaler(feature_range=(0, 1))\n","        data_close = data['Close'].values.reshape(-1, 1)\n","        scaled_data = scaler.fit_transform(data_close)\n","\n","        # Create sequences for prediction\n","        time_step = 60\n","        X_input = scaled_data[-time_step:].reshape(1, time_step, 1)\n","\n","        # Predict next price\n","        predicted_price = model.predict(X_input)\n","        predicted_price = scaler.inverse_transform(predicted_price)\n","\n","        # Display prediction\n","        st.subheader(\"Predicted Stock Price\")\n","        st.write(f\"Predicted Closing Price for {stock_ticker}: ${predicted_price[0][0]:.2f}\")\n","    except Exception as e:\n","        st.error(f\"Error in prediction: {e}\")\n"]}]}